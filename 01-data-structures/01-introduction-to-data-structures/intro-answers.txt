Line

The assignment asks me to provide a written answer to support my design choices, but mostly I did not make any design choices.  The test file and the skeleton code dictated the majority of choices (TDD, yay).

I did however add a next method because if people are waiting in line for something, then it is to be assumed that occasionally the first person in line will move from the line to participate in the activity he or she was waiting in line for.  This seems fundamentally different from leaving the line without participating in the event, so I added that functionality.  I added a test for this method as well.

Also, I would have implemented the middle function differently, in that I would have returned an array of the middle two people in the line if the line length was even.  I left it as is so it passed specs.

I also would have returned a Boolean for search instead of returning the person if true and nil if false.  I feel a Boolean is the more natural reponse to an existence query.

Also, the skeleton code has a private index method, which I presume is meant to return the array index of a given person in the members array.  In some languages, I presume this would be helpful for slicing the array when a random person leaves the line, but Ruby's delete method makes this trivial.

The assignment requires answers to some specific questions:

1.  The line data structure, which is a class, conforms to the parameters given.  It allows developers to insert a new person to the line.  All new entries are placed at the end of the array (or the back of the line).  It allows developers to send a message to the queue that a person has left the line and thus to delete that element from the array.  Developers have simple methods for retrieving the first, last or middle line members.  And the line can easily be searched for a specific person.  Lastly, I added a method to actually iterate the line, using first in, first out.

2. Because, by its nature, a first in first out line is unsorted, any search must iterate through the line until the element is found or the line is exhausted.

3. A great example of a real world first in, first out structure that is not a line of people is the process a food, or other perishable item (such as perscription drugs), vendor will use and/or distribute their products.  Typically the products will be used in the order that they arrived, but there will be times in which an item may have to be removed from the queue, so that matches this data structure well.  At first it would seem that each element in such a queue was non-unique, but the arrival time is the key component and would be how to differentiate between otherwise identical products.

Screen and Pixel

Once again the skeleton code and testing dictate the choices. Two comments of note:

1.  There is not a require_relative "pixel" in the pixel_spec.rb file.  I do not know if this was intentional to make students trouble shoot or if it is an oversight.

2.  Both the pixel class and the screen class require x and y coordinates.  This seems redundant in the pixel class and necessary in the screen class.  I can create a pixel, give it any old coordinates I want to give it and then assign it to any valid location in the matrix and it will be a valid pixel.  I could introduce code to validate that pixel x and y match screen x and y, but I do not see the point.  It seems enough to instantiate a pixel with a color, then place it anywhere in the screen matrix the developer wishes.

1.  The screen class allows developers to place objects in a two dimensional matrix, which is assigned dimensions upon initialization.  The class validates that the position requested is a valid location in the instantiated matrix array.  It adds the further functionality that a developer can retrieve an element at a given location.  Because the data structure is meant to represent a graphics screen, there is no immediate apparent need to search the matrix for elements.

The pixel class is a constructor that allows developers to instantiate pixels for use in the screen class.  It validates the rgb values and it also, for no apparent reason, specifies their location.  It stores no information beyond the values of the instance variables, for which it provides attr_accessor methods.

2.  There is no method given for searching for a given element (pixel) stored in the @matrix 2D array.  If there were a search method, it would have to search over unsorted data because of the nature of the pixel placement.  Sorting the data by anything except given location would distort the image, though I suppose the class could keep two copies of the array, one for display and one sorted, if there were a need to search for assigned pixels.  There is however a method for retrieving the pixel at a given location.

3.  The pixel class is very specific to its purpose.  I suppose with modification, it could represent any object that had three difining attributes and a location in two dimensional space, such as products in a grocery store with the location being the coordinates with respect to the floor plan, and the product's classification (meat, vegetable, etc.), specific name, and quantity as its defining attributes.

The screen class could easily be renamed and used in any application that needed to organize data in a two dimensional array, such as a database table.  If the data in any such application could be sorted then a sub class could inherit from it and specify the most appropriate search methods.