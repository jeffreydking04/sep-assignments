I am unclear as to what is wanted in this assignment.  The test suite will not pass if I use a different hashing function, so I left hashclass.rb with ascii values for keys as the hashing function and the rest of the code in a state that passes the tests, even though there are some major problems with the code as it is written (it simply is not a viable hash class for a variety of reasons, including returning values for undefined keys, resizing when not necessary, not storing unique key/value combinations if a key already exists at a given index with the same value but a different key name, and not accepting some valid key names, but I think we will solve some or all of those problems in the next checkpoint).  The hashclass.rb file passes the test suite.

But because the assignment specifies that we use our own hashing function, I copied that class over to my_hashclass.rb and made some changes, including adding a hashing function (I used one I found online because it was short and sweet--man, hashing functions are their own world--once I understood how hashes and hashing functions work, my mind was completely blown).  The test suite wants us to resize on reassignment, which is a bad idea, so I get rid of that too.  I am trusting that the other issues are going to be addressed in Checkpoint 5, so I tabled them.

2. As for doubling the size of the array, this will increase the likelihood of future collisions because a multiple of the previous array size is far more likely to produce the same remainder (and thus the same index, so that a collision occurs again) than doubling, then moving up to the nearest prime.  Resizing the array takes both time and memory and should be avoided if the cost of avoiding it is less than the cost of resizing.  Even simply adding 1 to the resize would dramatically reduce recurrent collisions.

Peeking ahead to Checkpoint 5 leads me to some further ideas about automatically resizing on collisions.  By chaining elements in the underlying array at collision indices, we can reduce the number of resizes necessary based on expected recall performance of chains of given lengths.  If the search through a chain would result in better performance than resizing, chaining is a net gain.  My previous answer was only considering the magnitude of the resize, not whether or not it was necessary.  Chaining was completely off my radar.